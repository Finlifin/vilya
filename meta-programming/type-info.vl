-- ignoring data::Display and data::ToString
-- expr -> expr '\'' id
fn format<T>(data: T) String {
    inline match data'typekind {
        .i8 | .i16 ... => ...
        .bool_ => ...
        .struct_ => ...
        .enum_ => ...
        .union_ => ...
        .pointer { payload, ... } => ...
        _ => comptimePanic!("unimplemented format for the type `{}`", data'typename),
    }
}

-- comptime expr to runtime expr ?


fn checktype<T>(data: T) []u8 {
    inline if data'type == u8 {
        "u8"
    } else {
        "not u8"
    }
}

println(checktype(23 as u8));

