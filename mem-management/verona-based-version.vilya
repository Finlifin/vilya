const LinkedList = struct {
    head: ?*mut Node,

    const Node = {
        data: usize,
        next: ?*mut Node,
    };
    fn new() LinkedList {
        Self { head: null }
    }
    
    fn insert(*mut self, data: usize) void {
        enter self { x -> 
            let tail = x.lastMut();
            tail.next = alloc Node{.data = data, .next = null};
            -- <x> -> head
            -- <x> -> head -> ... -> tail
            -- <x> -> head -> ... -> tail -> neo
        }
    }
};


pub fn main() !void {
    let iso mut list = LinkedList.new();
    list.insert(4545);
    
    let r = list.last(); -- <r> -> <list>.last()
    list.insert(114); -- unpermitted, the region <list> is not active
    println(r.data);

    -- if the reference just creates a new region by default
    let iso vec = Vec.new([12,324,34,54,5667,78][0..]);
    let r: *i32 = vec.get(1).?; -- window <vec> => <r>
    vec.append(34);     -- unpermitted, the region <vec> is not active
    
    -- if the reference is added to vec's region
    let vec = Vec.new([12,324,34,54,5667,78][0..]);
    let r: *i32 = vec.get(1).?; 
    vec.append([12,324,34,54,5667,78][0..]);
    println(r.*); -- segment fault!
}

r5 is active, r7 r6 are closed;r7 is old region and was freed, r6 is just created but not yet active
<r1> <r2> <r3> <r4> [r5] (r6) (r7) ...
