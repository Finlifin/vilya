const std = import!("std");
usingnamespace std.prelude;


const ToStringOption = struct {
    runtime allocator: &dyn std.mem.Allocator,
};

pub fn main() !void {
    let gpa = mem.page_allocator;
    -- problem one: comptime arg with runtime value
    -- problem two: how can toString recieve a comptime option
    -- let str = "Okay".toString<.{ .alloc = true }>(.{ .allocator = gpa.allocator() });
    let str = "Okay".toString<.{ .allocator = gpa.allocator() }>();
    -- 
    -- let str = "Okay".toString(gpa.allocator())();
    -- let str = toString(gpa.allocator())("Okay");
}

-- gpa.allocator() : &dyn Allocator { data, vtable }

-- ?
fn ToString<?option: ToStringOption> {
    trait {
        fn toString() String {
            ...
        }
    }
}

fn ToString<?option: ToStringOption> {
    trait {
        fn toString<?option: ToStringOption> {
            ...
        }
    }
}

impl ToString<...option...> for SomeStruct ...
-- -> impl fn toString<?option: ToStringOption> for SomeStruct ??
inline impl ToString for SomeStruct {
    fn toString<?option: Option> {
        function!{
            .self = .mut_ref,
            .args = <>,
            body! {
                ...
            }
        }
    }
    -- so that means, an instantiated value is able to call static comptime-functions of corresponding container namespace
}


----
impl Container 
    --> Container.*

impl ToString for Container
    --> Container.* or Container.ToString.*
----


-- 2024.3.2
const ManaOption = enum { self, cus, global };
fn ToString[ ...] {
    trait {
        fn toString[?mana: ManaOption = .global,...] {
            ...
        }
    }
}

let gpa = std.mem.GeneralPurposeAllocator.new();

-- String里每个需要alloc的函数都得传入allocator (如何RAII?)
-- 给他一个脱离RAII的机制，然后全手动管理（
let leak string = "toString".toString[.mana = .cus](gpa); 

let string = "toString".toString[.mana = .self](gpa); -- String 中将会多出一个allocator field
let string = "toString".toString();   -- 使用全局allocator














